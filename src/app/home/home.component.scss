.root {
    width: var(--square-size);
    height: var(--square-size);

    position: relative;

    margin: calc((100vh - var(--square-size)) / 2)
            calc((100vw - var(--square-size)) / 2);

    // Size of the square used for the grid and for the detail view
    --square-size: 160px;

    // The size of a grid item, which is an integer number of pixels
    --grid-item-size: calc((var(--square-size) - var(--grid-padding-end))/3);

    // The extra size to add to the grid elements at the right and bottom of the grid
    // so that it perfectly overlaps the detail container
    --grid-padding-end: 1px;

    @media screen and (min-width: 330px) and (min-height: 330px) {
        --square-size: 320px;
        // Subtract 2 to get 318, which is a multiple of 3
        --grid-padding-end: 2px;
    }

    @media screen and (min-width: 500px) and (min-height: 500px) {
        --square-size: 480px;
        // This is already a multiple of 3, no need to set grid padding
        --grid-padding-end: 0px;
    }

    @media screen and (min-width: 650px) and (min-height: 650px) {
        --square-size: 640px;
        // Subtract 1 to get 639, which is a multiple of 3
        --grid-padding-end: 1px;
    }
}

.detail-container {
    width: var(--square-size);
    height: var(--square-size);
    > img {
        width: 100%;
        height: 100%;
    }
}

.root > * {
    // Center top-level elements and make them use absolute positioning
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
}

.item-group {
    width: var(--square-size);
    height: var(--square-size);

    perspective: 1000px;

    display: grid;
    grid-template-columns:
        var(--grid-item-size)
        var(--grid-item-size)
        calc(var(--grid-item-size) + var(--grid-padding-end));
    grid-template-rows:
        var(--grid-item-size)
        var(--grid-item-size)
        calc(var(--grid-item-size) + var(--grid-padding-end));
    justify-content: center;
    gap: 0;
}

.item {
    transform-style: preserve-3d;

    width: 100%;
    height: 100%;

    &--inner {
        position: relative;
        transform-style: preserve-3d;
    
        width: 100%;
        height: 100%;
    }

    &--front, &--back {
        // Card contents are overlaid on top of each other
        position: absolute;
        top: 0;
        left: 0;

        display: block;
        width: 100%;
        height: 100%;

        border-radius: 15px;
        overflow: hidden;

        backface-visibility: hidden;
    }

    &--front > img {
        width: 100%;
        height: 100%;
        transition: transform 300ms ease-in-out;
    }

    &--back {
        transform: rotateY(180deg);

        > img {
            // Use --square-size since this should match the detail view
            width: var(--square-size);
            height: var(--square-size);
        }
    }

    &:hover {
        .item--front > img {
            transform: scale(1.5);
        }
    }
}

@for $row from 1 through 3 {
    @for $col from 1 through 3 {
        .grid-cell-#{$row}-#{$col} {
            grid-row: $row;
            grid-column: $col;

            .item--back > img {
                transform:
                    translate(
                        calc(var(--grid-item-size) * (1 - $col)),
                        calc(var(--grid-item-size) * (1 - $row)));
            }
        }
    }
}